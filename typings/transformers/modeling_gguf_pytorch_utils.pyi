"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import Dict, Optional
from .utils import is_torch_available

if is_torch_available():
    ...
logger = ...
GGUF_TO_TRANSFORMERS_MAPPING = ...
GGUF_SUPPORTED_ARCHITECTURES = ...
def read_field(reader, field): # -> list[int | float | bool | str | Any]:
    ...

def load_gguf_checkpoint(gguf_checkpoint_path, return_tensors=...):
    """
    Load a GGUF file and return a dictionary of parsed parameters containing tensors, the parsed
    tokenizer and config attributes.

    Args:
        gguf_checkpoint_path (`str`):
            The path the to GGUF file to load
        return_tensors (`bool`, defaults to `True`):
            Whether to read the tensors from the file and return them. Not doing so is faster
            and only loads the metadata in memory.
    """
    ...

def reverse_permute_weights(weights: np.ndarray, n_head: int, num_kv_heads: Optional[int] = ...) -> np.ndarray:
    ...

def reverse_reshape_weights(weights: np.ndarray, n_head: int, n_embed: int): # -> ndarray[Any, dtype[Any]]:
    ...

def reverse_reshape_bias(weights: np.ndarray, n_head: int, n_embed: int): # -> ndarray[Any, dtype[Any]]:
    ...

def split_moe_expert_tensor(weights: np.ndarray, parsed_parameters: Dict[str, Dict], name: str, tensor_key_mapping: dict): # -> None:
    ...

