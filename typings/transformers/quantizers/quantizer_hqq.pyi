"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Dict, List, TYPE_CHECKING
from ..utils import is_accelerate_available, is_torch_available
from .base import HfQuantizer
from ..modeling_utils import PreTrainedModel

if TYPE_CHECKING:
    ...
if is_accelerate_available():
    ...
if is_torch_available():
    ...
logger = ...
def find_parent(model, name):
    ...

class HqqHfQuantizer(HfQuantizer):
    """
    HQQ quantizer base HF class.
    nn.Linear modules are first tagged with quant_config in _process_model_before_weight_loading().
    The actual quantization and offloading to the GPU is done in check_quantized_param().
    """
    use_keep_in_fp32_modules = ...
    requires_parameters_quantization = ...
    requires_calibration = ...
    required_packages = ...
    def __init__(self, quantization_config, **kwargs) -> None:
        ...
    
    def validate_environment(self, *args, **kwargs): # -> None:
        ...
    
    def update_missing_keys(self, model: PreTrainedModel, missing_keys: List[str], prefix: str, **kwargs) -> List[str]:
        ...
    
    def update_expected_keys(self, model: PreTrainedModel, expected_keys: List[str], loaded_keys: List[str]) -> List[str]:
        ...
    
    def check_quantized_param(self, model: PreTrainedModel, param_value: torch.Tensor, param_name: str, state_dict: Dict[str, Any], **kwargs) -> bool:
        ...
    
    def create_quantized_param(self, model: PreTrainedModel, param_value: torch.Tensor, param_name: str, target_device: torch.device, state_dict: Dict[str, Any], unexpected_keys: List[str]): # -> None:
        """
        Each nn.Linear layer is processsed here.
        We first check if the corresponding module state_dict contains already HQQ quantized parameters.
        If not, we create a temp linear layer with the module state_dict params and use it for quantization
        """
        ...
    
    def is_serializable(self, safe_serialization=...): # -> Literal[True]:
        ...
    
    @property
    def is_trainable(self) -> bool:
        ...
    


