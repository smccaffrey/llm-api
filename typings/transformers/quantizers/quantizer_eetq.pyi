"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Dict, List, Optional, TYPE_CHECKING
from .base import HfQuantizer
from ..modeling_utils import PreTrainedModel
from ..utils import is_torch_available

if TYPE_CHECKING:
    ...
if is_torch_available():
    ...
logger = ...
class EetqHfQuantizer(HfQuantizer):
    """
    8-bit quantization from EETQ quantization method:
        before loading: converts transformer layers into W8A16Linear during loading: load 16bit weight and pass to the
        layer object after: quantizes individual weights in Linear8bitLt into 8bit at first .cuda() call
    """
    requires_parameters_quantization = ...
    requires_calibration = ...
    required_packages = ...
    def __init__(self, quantization_config, **kwargs) -> None:
        ...
    
    def validate_environment(self, *args, **kwargs): # -> None:
        ...
    
    def update_torch_dtype(self, torch_dtype: torch.dtype) -> torch.dtype:
        ...
    
    def check_quantized_param(self, model: PreTrainedModel, param_value: torch.Tensor, param_name: str, state_dict: Dict[str, Any], **kwargs): # -> bool:
        ...
    
    def create_quantized_param(self, model: PreTrainedModel, param_value: torch.Tensor, param_name: str, target_device: torch.device, state_dict: Dict[str, Any], unexpected_keys: Optional[List[str]] = ...): # -> None:
        """
        quantizes weights into qweight and weight_scales
        """
        ...
    
    def is_serializable(self, safe_serialization=...): # -> Literal[True]:
        ...
    
    @property
    def is_trainable(self) -> bool:
        ...
    


