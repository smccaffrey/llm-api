"""
This type stub file was generated by pyright.
"""

import torch
from ..utils import is_accelerate_available, is_fbgemm_gpu_available, is_torch_available
from torch import nn

if is_torch_available():
    ...
if is_accelerate_available():
    ...
if is_fbgemm_gpu_available():
    ...
logger = ...
class FbgemmFp8Linear(torch.nn.Module):
    def __init__(self, in_features, out_features, bias, weight_dtype=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


def replace_with_fbgemm_fp8_linear(model, modules_to_not_convert=..., current_key_name=..., quantization_config=..., pre_quantized=...):
    """
    A helper function to replace all `torch.nn.Linear` modules by `FbgemmFp8Linear` modules.
    This will enable running your models using high performance fp8 kernel from FBGEMM library.

    The function will be run recursively and replace all `torch.nn.Linear` modules except for the `lm_head` that should
    be kept as a `torch.nn.Linear` module. The replacement is done under `init_empty_weights` context manager so no
    CPU/GPU memory is required to run this function. Each weight will be quantized along the channel.

    Parameters:
        model (`torch.nn.Module`):
            Input model or `torch.nn.Module` as the function is run recursively.
        modules_to_not_convert (`List[`str`]`, *optional*, defaults to `["lm_head"]`):
            Names of the modules to not convert in `FP8Linear`. In practice we keep the `lm_head` in full precision
            for numerical stability reasons.
        current_key_name (`List[`str`]`, *optional*):
            An array to track the current key of the recursion. This is used to check whether the current key (part of
            it) is not in the list of modules to not convert (for instances modules that are offloaded to `cpu` or
            `disk`).
    """
    ...

