"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING
from ..utils import OptionalDependencyNotAvailable, _LazyModule, is_torch_available
from .aqlm import replace_with_aqlm_linear
from .awq import fuse_awq_modules, post_init_awq_exllama_modules, post_init_awq_ipex_modules, replace_quantization_scales, replace_with_awq_linear
from .bitnet import BitLinear, pack_weights, replace_with_bitnet_linear, unpack_weights
from .bitsandbytes import dequantize_and_replace, get_keys_to_not_convert, replace_8bit_linear, replace_with_bnb_linear, set_module_8bit_tensor_to_device, set_module_quantized_tensor_to_device, validate_bnb_backend_availability
from .deepspeed import HfDeepSpeedConfig, HfTrainerDeepSpeedConfig, deepspeed_config, deepspeed_init, deepspeed_load_checkpoint, deepspeed_optim_sched, is_deepspeed_available, is_deepspeed_zero3_enabled, set_hf_deepspeed_config, unset_hf_deepspeed_config
from .eetq import replace_with_eetq_linear
from .fbgemm_fp8 import FbgemmFp8Linear, replace_with_fbgemm_fp8_linear
from .fsdp import is_fsdp_managed_module
from .ggml import GGUF_CONFIG_MAPPING, GGUF_TENSOR_MAPPING, GGUF_TOKENIZER_MAPPING, _gguf_parse_value, load_dequant_gguf_tensor, load_gguf
from .hqq import prepare_for_hqq_linear
from .integration_utils import AzureMLCallback, ClearMLCallback, CodeCarbonCallback, CometCallback, DVCLiveCallback, DagsHubCallback, FlyteCallback, INTEGRATION_TO_CALLBACK, MLflowCallback, NeptuneCallback, NeptuneMissingConfiguration, TensorBoardCallback, WandbCallback, get_available_reporting_integrations, get_reporting_integration_callbacks, hp_params, is_azureml_available, is_clearml_available, is_codecarbon_available, is_comet_available, is_dagshub_available, is_dvclive_available, is_flyte_deck_standard_available, is_flytekit_available, is_mlflow_available, is_neptune_available, is_optuna_available, is_ray_available, is_ray_tune_available, is_sigopt_available, is_tensorboard_available, is_wandb_available, rewrite_logs, run_hp_search_optuna, run_hp_search_ray, run_hp_search_sigopt, run_hp_search_wandb
from .peft import PeftAdapterMixin
from .quanto import replace_with_quanto_layers

_import_structure = ...
if not is_torch_available():
    ...
if TYPE_CHECKING:
    ...
else:
    ...
