"""
This type stub file was generated by pyright.
"""

from ..utils import DummyObject

class PyTorchBenchmark(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PyTorchBenchmarkArguments(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Cache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CacheConfig(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DynamicCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EncoderDecoderCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HQQQuantizedCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HybridCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MambaCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OffloadedCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OffloadedStaticCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QuantizedCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QuantizedCacheConfig(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QuantoQuantizedCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SinkCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SlidingWindowCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StaticCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GlueDataset(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GlueDataTrainingArguments(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LineByLineTextDataset(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LineByLineWithRefDataset(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LineByLineWithSOPTextDataset(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SquadDataset(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SquadDataTrainingArguments(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TextDataset(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TextDatasetForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlternatingCodebooksLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BayesianDetectorConfig(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BayesianDetectorModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeamScorer(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeamSearchScorer(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClassifierFreeGuidanceLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConstrainedBeamSearchScorer(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Constraint(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConstraintListState(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DisjunctiveConstraint(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EncoderNoRepeatNGramLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EncoderRepetitionPenaltyLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EosTokenCriteria(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EpsilonLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EtaLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ExponentialDecayLengthPenalty(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ForcedBOSTokenLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ForcedEOSTokenLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GenerationMixin(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HammingDiversityLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InfNanRemoveLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LogitNormalization(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LogitsProcessorList(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MaxLengthCriteria(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MaxTimeCriteria(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MinLengthLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MinNewTokensLengthLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MinPLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NoBadWordsLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NoRepeatNGramLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhrasalConstraint(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PrefixConstrainedLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RepetitionPenaltyLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SequenceBiasLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StoppingCriteria(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StoppingCriteriaList(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StopStringCriteria(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SuppressTokensAtBeginLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SuppressTokensLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SynthIDTextWatermarkDetector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SynthIDTextWatermarkingConfig(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SynthIDTextWatermarkLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TemperatureLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TopKLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TopPLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TypicalLogitsWarper(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UnbatchedClassifierFreeGuidanceLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WatermarkDetector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WatermarkLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WhisperTimeStampLogitsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TorchExportableModuleWithStaticCache(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def convert_and_export_with_cache(*args, **kwargs): # -> None:
    ...

ROPE_INIT_FUNCTIONS = ...
class PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlbertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_albert(*args, **kwargs): # -> None:
    ...

class AlignModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlignPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlignTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AlignVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AltCLIPModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AltCLIPPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AltCLIPTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AltCLIPVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ASTForAudioClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ASTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ASTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING = ...
MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING = ...
MODEL_FOR_AUDIO_XVECTOR_MAPPING = ...
MODEL_FOR_BACKBONE_MAPPING = ...
MODEL_FOR_CAUSAL_IMAGE_MODELING_MAPPING = ...
MODEL_FOR_CAUSAL_LM_MAPPING = ...
MODEL_FOR_CTC_MAPPING = ...
MODEL_FOR_DEPTH_ESTIMATION_MAPPING = ...
MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING = ...
MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING = ...
MODEL_FOR_IMAGE_MAPPING = ...
MODEL_FOR_IMAGE_SEGMENTATION_MAPPING = ...
MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING = ...
MODEL_FOR_IMAGE_TO_IMAGE_MAPPING = ...
MODEL_FOR_INSTANCE_SEGMENTATION_MAPPING = ...
MODEL_FOR_KEYPOINT_DETECTION_MAPPING = ...
MODEL_FOR_MASK_GENERATION_MAPPING = ...
MODEL_FOR_MASKED_IMAGE_MODELING_MAPPING = ...
MODEL_FOR_MASKED_LM_MAPPING = ...
MODEL_FOR_MULTIPLE_CHOICE_MAPPING = ...
MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING = ...
MODEL_FOR_OBJECT_DETECTION_MAPPING = ...
MODEL_FOR_PRETRAINING_MAPPING = ...
MODEL_FOR_QUESTION_ANSWERING_MAPPING = ...
MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING = ...
MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING = ...
MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING = ...
MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING = ...
MODEL_FOR_TABLE_QUESTION_ANSWERING_MAPPING = ...
MODEL_FOR_TEXT_ENCODING_MAPPING = ...
MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING = ...
MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING = ...
MODEL_FOR_TIME_SERIES_CLASSIFICATION_MAPPING = ...
MODEL_FOR_TIME_SERIES_REGRESSION_MAPPING = ...
MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING = ...
MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING = ...
MODEL_FOR_VIDEO_CLASSIFICATION_MAPPING = ...
MODEL_FOR_VISION_2_SEQ_MAPPING = ...
MODEL_FOR_VISUAL_QUESTION_ANSWERING_MAPPING = ...
MODEL_FOR_ZERO_SHOT_IMAGE_CLASSIFICATION_MAPPING = ...
MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING = ...
MODEL_MAPPING = ...
MODEL_WITH_LM_HEAD_MAPPING = ...
class AutoBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForAudioClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForAudioFrameClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForAudioXVector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForDepthEstimation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForDocumentQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForImageSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForImageTextToText(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForImageToImage(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForInstanceSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForKeypointDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForMaskGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForSeq2SeqLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForSpeechSeq2Seq(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForTableQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForTextEncoding(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForTextToSpectrogram(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForTextToWaveform(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForUniversalSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForVideoClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForVision2Seq(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForVisualQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForZeroShotImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelForZeroShotObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoModelWithLMHead(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoformerForPrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AutoformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BarkCausalModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BarkCoarseModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BarkFineModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BarkModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BarkPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BarkSemanticModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BartForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BartForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BartForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BartForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BartModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BartPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BartPretrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PretrainedBartModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeitBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeitForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeitForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeitForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeitModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BeitPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_bert(*args, **kwargs): # -> None:
    ...

class BertGenerationDecoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertGenerationEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BertGenerationPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_bert_generation(*args, **kwargs): # -> None:
    ...

class BigBirdForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_big_bird(*args, **kwargs): # -> None:
    ...

class BigBirdPegasusForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdPegasusForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdPegasusForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdPegasusForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdPegasusModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BigBirdPegasusPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BioGptForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BioGptForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BioGptForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BioGptModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BioGptPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BitBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BitForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BitModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BitPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotSmallForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotSmallForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotSmallModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlenderbotSmallPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlipForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlipForImageTextRetrieval(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlipForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlipModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlipPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlipTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BlipVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2ForImageTextRetrieval(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2QFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2TextModelWithProjection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2VisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Blip2VisionModelWithProjection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BloomForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BloomForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BloomForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BloomForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BloomModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BloomPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BridgeTowerForContrastiveLearning(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BridgeTowerForImageAndTextRetrieval(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BridgeTowerForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BridgeTowerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BridgeTowerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BrosForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BrosModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BrosPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BrosProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BrosSpadeEEForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class BrosSpadeELForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CamembertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CanineForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CanineForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CanineForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CanineForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CanineModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CaninePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_canine(*args, **kwargs): # -> None:
    ...

class ChameleonForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChameleonModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChameleonPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChameleonProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChameleonVQVAE(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChineseCLIPModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChineseCLIPPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChineseCLIPTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChineseCLIPVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClapAudioModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClapAudioModelWithProjection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClapFeatureExtractor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClapModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClapPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClapTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClapTextModelWithProjection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPTextModelWithProjection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPVisionModelWithProjection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPSegForImageSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPSegModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPSegPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPSegTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CLIPSegVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClvpDecoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClvpEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClvpForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClvpModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClvpModelForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ClvpPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CodeGenForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CodeGenModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CodeGenPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CohereForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CohereModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CoherePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConditionalDetrForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConditionalDetrForSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConditionalDetrModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConditionalDetrPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_convbert(*args, **kwargs): # -> None:
    ...

class ConvNextBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvNextForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvNextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvNextPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvNextV2Backbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvNextV2ForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvNextV2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ConvNextV2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CpmAntForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CpmAntModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CpmAntPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CTRLForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CTRLLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CTRLModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CTRLPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CvtForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CvtModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class CvtPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DacModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DacPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecAudioForAudioFrameClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecAudioForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecAudioForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecAudioForXVector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecAudioModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecAudioPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecTextPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecVisionForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecVisionForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Data2VecVisionPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DbrxForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DbrxModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DbrxPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaV2ForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaV2ForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaV2ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaV2ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaV2ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaV2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DebertaV2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DecisionTransformerGPT2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DecisionTransformerGPT2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DecisionTransformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DecisionTransformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeformableDetrForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeformableDetrModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeformableDetrPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeiTForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeiTForImageClassificationWithTeacher(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeiTForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeiTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DeiTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetaForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EfficientFormerForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EfficientFormerForImageClassificationWithTeacher(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EfficientFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EfficientFormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieMForInformationExtraction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieMForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieMForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieMForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieMForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieMModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieMPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTSanJapaneseForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTSanJapaneseModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTSanJapanesePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraphormerForGraphClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraphormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraphormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JukeboxModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JukeboxPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JukeboxPrior(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JukeboxVQVAE(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MCTCTForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MCTCTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MCTCTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MMBTForClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MMBTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ModalEmbeddings(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NatBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NatForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NatModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NatPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NezhaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenLlamaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenLlamaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenLlamaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenLlamaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class QDQBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_qdqbert(*args, **kwargs): # -> None:
    ...

class RealmEmbedder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RealmForOpenQA(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RealmKnowledgeAugEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RealmPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RealmReader(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RealmRetriever(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RealmScorer(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_realm(*args, **kwargs): # -> None:
    ...

class RetriBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RetriBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Speech2Text2ForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Speech2Text2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TrajectoryTransformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TrajectoryTransformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AdaptiveEmbedding(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TransfoXLForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TransfoXLLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TransfoXLModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TransfoXLPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_transfo_xl(*args, **kwargs): # -> None:
    ...

class TvltForAudioVisualClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TvltForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TvltModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TvltPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VanForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VanModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VanPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTHybridForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTHybridModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTHybridPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMProphetNetDecoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMProphetNetEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMProphetNetForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMProphetNetForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMProphetNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMProphetNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DepthAnythingForDepthEstimation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DepthAnythingPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetrForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetrForSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetrModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DetrPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DinatBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DinatForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DinatModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DinatPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Dinov2Backbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Dinov2ForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Dinov2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Dinov2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DistilBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DistilBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DistilBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DistilBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DistilBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DistilBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DistilBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DonutSwinModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DonutSwinPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPRContextEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPRPretrainedContextEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPRPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPRPretrainedQuestionEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPRPretrainedReader(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPRQuestionEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPRReader(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPTForDepthEstimation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPTForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class DPTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EfficientNetForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EfficientNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EfficientNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ElectraPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_electra(*args, **kwargs): # -> None:
    ...

class EncodecModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EncodecPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EncoderDecoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErnieModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ErniePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EsmFoldPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EsmForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EsmForProteinFolding(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EsmForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EsmForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EsmModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class EsmPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconMambaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconMambaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FalconMambaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FastSpeech2ConformerHifiGan(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FastSpeech2ConformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FastSpeech2ConformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FastSpeech2ConformerWithHifiGan(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertForQuestionAnsweringSimple(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlaubertWithLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlavaForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlavaImageCodebook(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlavaImageModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlavaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlavaMultimodalModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlavaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FlavaTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FocalNetBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FocalNetForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FocalNetForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FocalNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FocalNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FSMTForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FSMTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PretrainedFSMTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelBaseModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FunnelPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_funnel(*args, **kwargs): # -> None:
    ...

class FuyuForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class FuyuPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GemmaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GemmaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GemmaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GemmaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GemmaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Gemma2ForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Gemma2ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Gemma2ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Gemma2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Gemma2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GitForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GitModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GitPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GitVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GlmForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GlmForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GlmForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GlmModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GlmPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GLPNForDepthEstimation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GLPNModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GLPNPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPT2DoubleHeadsModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPT2ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPT2ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPT2ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPT2LMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPT2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPT2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_gpt2(*args, **kwargs): # -> None:
    ...

class GPTBigCodeForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTBigCodeForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTBigCodeForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTBigCodeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTBigCodePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_gpt_neo(*args, **kwargs): # -> None:
    ...

class GPTNeoXForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXJapaneseForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXJapaneseModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTNeoXJapanesePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTJForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTJForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTJForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTJModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GPTJPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraniteForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraniteModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GranitePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraniteMoeForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraniteMoeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GraniteMoePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GroundingDinoForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GroundingDinoModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GroundingDinoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GroupViTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GroupViTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GroupViTTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GroupViTVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HieraBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HieraForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HieraForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HieraModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HieraPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HubertForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HubertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HubertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class HubertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IdeficsForVisionText2Text(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IdeficsModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IdeficsPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class IdeficsProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics2ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics2Processor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics3ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics3Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics3PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Idefics3Processor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ImageGPTForCausalImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ImageGPTForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ImageGPTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ImageGPTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_imagegpt(*args, **kwargs): # -> None:
    ...

class InformerForPrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipQFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipVideoForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipVideoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipVideoQFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InstructBlipVideoVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JambaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JambaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JambaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JambaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JetMoeForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JetMoeForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JetMoeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class JetMoePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Kosmos2ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Kosmos2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Kosmos2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv2ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv2ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv2ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv3ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv3ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv3ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv3Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LayoutLMv3PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LEDForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LEDForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LEDForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LEDModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LEDPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LevitForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LevitForImageClassificationWithTeacher(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LevitModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LevitPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LiltForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LiltForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LiltForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LiltModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LiltPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlamaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlamaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlamaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlamaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlamaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlamaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaNextForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaNextPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaNextVideoForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaNextVideoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaOnevisionForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LlavaOnevisionPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongformerForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongformerForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongformerForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongformerForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongformerForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongT5EncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongT5ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongT5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LongT5PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForEntityClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForEntityPairClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForEntitySpanClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LukePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LxmertEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LxmertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LxmertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LxmertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LxmertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class LxmertVisualFeatureEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class M2M100ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class M2M100Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class M2M100PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MambaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MambaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MambaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Mamba2ForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Mamba2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Mamba2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarianForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarianModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarianMTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarianPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarkupLMForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarkupLMForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarkupLMForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarkupLMModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MarkupLMPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Mask2FormerForUniversalSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Mask2FormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Mask2FormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MaskFormerForInstanceSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MaskFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MaskFormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MaskFormerSwinBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MBartForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MBartForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MBartForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MBartForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MBartModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MBartPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MegatronBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MgpstrForSceneTextRecognition(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MgpstrModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MgpstrPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MimiModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MimiPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MistralForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MistralForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MistralForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MistralForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MistralModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MistralPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MixtralForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MixtralForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MixtralForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MixtralForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MixtralModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MixtralPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MllamaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MllamaForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MllamaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MllamaProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MllamaTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MllamaVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertForNextSentencePrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_mobilebert(*args, **kwargs): # -> None:
    ...

class MobileNetV1ForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileNetV1Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileNetV1PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_mobilenet_v1(*args, **kwargs): # -> None:
    ...

class MobileNetV2ForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileNetV2ForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileNetV2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileNetV2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_mobilenet_v2(*args, **kwargs): # -> None:
    ...

class MobileViTForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileViTForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileViTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileViTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileViTV2ForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileViTV2ForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileViTV2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MobileViTV2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MoshiForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MoshiForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MoshiModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MoshiPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MPNetForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MPNetForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MPNetForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MPNetForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MPNetForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MPNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MPNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MptForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MptForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MptForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MptForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MptModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MptPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MraForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MraForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MraForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MraForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MraForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MraModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MraPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MT5EncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MT5ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MT5ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MT5ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MT5ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MT5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MT5PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenMelodyForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenMelodyForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenMelodyModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MusicgenMelodyPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MvpForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MvpForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MvpForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MvpForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MvpModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class MvpPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NemotronForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NemotronForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NemotronForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NemotronForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NemotronModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NemotronPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NllbMoeForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NllbMoeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NllbMoePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NllbMoeSparseMLP(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NllbMoeTop2Router(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NystromformerForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NystromformerForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NystromformerForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NystromformerForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NystromformerForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NystromformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class NystromformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OlmoForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OlmoModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OlmoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OlmoeForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OlmoeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OlmoePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OmDetTurboForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OmDetTurboPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OneFormerForUniversalSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OneFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OneFormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenAIGPTDoubleHeadsModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenAIGPTForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenAIGPTLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenAIGPTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OpenAIGPTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_openai_gpt(*args, **kwargs): # -> None:
    ...

class OPTForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OPTForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OPTForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OPTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OPTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Owlv2ForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Owlv2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Owlv2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Owlv2TextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Owlv2VisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OwlViTForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OwlViTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OwlViTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OwlViTTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class OwlViTVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PaliGemmaForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PaliGemmaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PaliGemmaProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSMixerForPrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSMixerForPretraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSMixerForRegression(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSMixerForTimeSeriesClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSMixerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSMixerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSTForClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSTForPrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSTForPretraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSTForRegression(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PatchTSTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PegasusForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PegasusForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PegasusModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PegasusPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PegasusXForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PegasusXModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PegasusXPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverForImageClassificationConvProcessing(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverForImageClassificationFourier(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverForImageClassificationLearned(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverForMultimodalAutoencoding(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverForOpticalFlow(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PerceiverPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PersimmonForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PersimmonForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PersimmonForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PersimmonModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PersimmonPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhiForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhiForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhiForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhiModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhiPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Phi3ForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Phi3ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Phi3ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Phi3Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Phi3PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhimoeForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhimoeForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhimoeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PhimoePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Pix2StructForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Pix2StructPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Pix2StructTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Pix2StructVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PixtralPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PixtralVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PLBartForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PLBartForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PLBartForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PLBartModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PLBartPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PoolFormerForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PoolFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PoolFormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Pop2PianoForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Pop2PianoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ProphetNetDecoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ProphetNetEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ProphetNetForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ProphetNetForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ProphetNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ProphetNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PvtForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PvtModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PvtPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PvtV2Backbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PvtV2ForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PvtV2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class PvtV2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2ForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2AudioEncoder(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2AudioForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2AudioPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2MoeForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2MoeForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2MoeForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2MoeForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2MoeModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2MoePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2VLForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2VLModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Qwen2VLPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RagModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RagPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RagSequenceForGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RagTokenForGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RecurrentGemmaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RecurrentGemmaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RecurrentGemmaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ReformerForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ReformerForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ReformerForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ReformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ReformerModelWithLMHead(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ReformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RegNetForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RegNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RegNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RemBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_rembert(*args, **kwargs): # -> None:
    ...

class ResNetBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ResNetForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ResNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ResNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RobertaPreLayerNormPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoCBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_roc_bert(*args, **kwargs): # -> None:
    ...

class RoFormerForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoFormerForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoFormerForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoFormerForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoFormerForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoFormerForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RoFormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_roformer(*args, **kwargs): # -> None:
    ...

class RTDetrForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RTDetrModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RTDetrPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RTDetrResNetBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RTDetrResNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RwkvForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RwkvModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class RwkvPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SamModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SamPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TCodeHifiGan(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TForSpeechToSpeech(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TForSpeechToText(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TForTextToSpeech(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TForTextToText(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4THifiGan(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TTextToUnitForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4TTextToUnitModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4Tv2ForSpeechToSpeech(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4Tv2ForSpeechToText(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4Tv2ForTextToSpeech(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4Tv2ForTextToText(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4Tv2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SeamlessM4Tv2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegformerDecodeHead(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegformerForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegformerForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegGptForImageSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegGptModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SegGptPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWDForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWDForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWDModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SEWDPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SiglipForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SiglipModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SiglipPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SiglipTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SiglipVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpeechEncoderDecoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Speech2TextForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Speech2TextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Speech2TextPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpeechT5ForSpeechToSpeech(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpeechT5ForSpeechToText(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpeechT5ForTextToSpeech(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpeechT5HifiGan(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpeechT5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SpeechT5PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SplinterForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SplinterForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SplinterModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SplinterPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SqueezeBertForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SqueezeBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SqueezeBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SqueezeBertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SqueezeBertForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SqueezeBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SqueezeBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StableLmForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StableLmForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StableLmForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StableLmModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class StableLmPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Starcoder2ForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Starcoder2ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Starcoder2ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Starcoder2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Starcoder2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SuperPointForKeypointDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SuperPointPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwiftFormerForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwiftFormerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwiftFormerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwinBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwinForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwinForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwinModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwinPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swin2SRForImageSuperResolution(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swin2SRModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swin2SRPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swinv2Backbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swinv2ForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swinv2ForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swinv2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Swinv2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwitchTransformersEncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwitchTransformersForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwitchTransformersModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwitchTransformersPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwitchTransformersSparseMLP(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SwitchTransformersTop1Router(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class T5EncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class T5ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class T5ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class T5ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class T5ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class T5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class T5PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_t5(*args, **kwargs): # -> None:
    ...

class TableTransformerForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TableTransformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TableTransformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TapasForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TapasForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TapasForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TapasModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TapasPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_tapas(*args, **kwargs): # -> None:
    ...

class TimeSeriesTransformerForPrediction(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TimeSeriesTransformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TimeSeriesTransformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TimesformerForVideoClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TimesformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TimesformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TimmBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TrOCRForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TrOCRPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TvpForVideoGrounding(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TvpModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class TvpPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UdopEncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UdopForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UdopModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UdopPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UMT5EncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UMT5ForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UMT5ForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UMT5ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UMT5ForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UMT5Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UMT5PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechSatForAudioFrameClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechSatForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechSatForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechSatForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechSatForXVector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechSatModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UniSpeechSatPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UnivNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UperNetForSemanticSegmentation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class UperNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VideoLlavaForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VideoLlavaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VideoLlavaProcessor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VideoMAEForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VideoMAEForVideoClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VideoMAEModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VideoMAEPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViltForImageAndTextRetrieval(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViltForImagesAndTextClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViltForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViltForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViltForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViltModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViltPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VipLlavaForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VipLlavaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisionEncoderDecoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisionTextDualEncoderModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisualBertForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisualBertForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisualBertForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisualBertForRegionToPhraseAlignment(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisualBertForVisualReasoning(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisualBertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VisualBertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTForMaskedImageModeling(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTMAEForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTMAEModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTMAEPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTMSNForImageClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTMSNModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ViTMSNPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VitDetBackbone(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VitDetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VitDetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VitMatteForImageMatting(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VitMattePreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VitsModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VitsPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VivitForVideoClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VivitModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class VivitPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ForAudioFrameClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ForXVector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2Model(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2PreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2BertForAudioFrameClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2BertForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2BertForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2BertForXVector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2BertModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2BertPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ConformerForAudioFrameClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ConformerForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ConformerForPreTraining(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ConformerForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ConformerForXVector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ConformerModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Wav2Vec2ConformerPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WavLMForAudioFrameClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WavLMForCTC(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WavLMForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WavLMForXVector(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WavLMModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WavLMPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WhisperForAudioClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WhisperForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WhisperForConditionalGeneration(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WhisperModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class WhisperPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XCLIPModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XCLIPPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XCLIPTextModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XCLIPVisionModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XGLMForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XGLMModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XGLMPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMForQuestionAnsweringSimple(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMWithLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLMRobertaXLPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetForQuestionAnsweringSimple(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetLMHeadModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XLNetPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def load_tf_weights_in_xlnet(*args, **kwargs): # -> None:
    ...

class XmodForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XmodForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XmodForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XmodForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XmodForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XmodForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XmodModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class XmodPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YolosForObjectDetection(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YolosModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YolosPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YosoForMaskedLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YosoForMultipleChoice(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YosoForQuestionAnswering(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YosoForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YosoForTokenClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YosoModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class YosoPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ZambaForCausalLM(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ZambaForSequenceClassification(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ZambaModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ZambaPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ZoeDepthForDepthEstimation(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ZoeDepthPreTrainedModel(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Adafactor(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class AdamW(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def get_constant_schedule(*args, **kwargs): # -> None:
    ...

def get_constant_schedule_with_warmup(*args, **kwargs): # -> None:
    ...

def get_cosine_schedule_with_warmup(*args, **kwargs): # -> None:
    ...

def get_cosine_with_hard_restarts_schedule_with_warmup(*args, **kwargs): # -> None:
    ...

def get_inverse_sqrt_schedule(*args, **kwargs): # -> None:
    ...

def get_linear_schedule_with_warmup(*args, **kwargs): # -> None:
    ...

def get_polynomial_decay_schedule_with_warmup(*args, **kwargs): # -> None:
    ...

def get_scheduler(*args, **kwargs): # -> None:
    ...

def get_wsd_schedule(*args, **kwargs): # -> None:
    ...

class Conv1D(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def apply_chunking_to_forward(*args, **kwargs): # -> None:
    ...

def prune_layer(*args, **kwargs): # -> None:
    ...

class Trainer(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


def torch_distributed_zero_first(*args, **kwargs): # -> None:
    ...

class Seq2SeqTrainer(metaclass=DummyObject):
    _backends = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


