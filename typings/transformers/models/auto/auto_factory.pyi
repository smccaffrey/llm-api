"""
This type stub file was generated by pyright.
"""

from collections import OrderedDict
from ...utils import is_torch_available

"""Factory function to build auto-model classes."""
if is_torch_available():
    ...
logger = ...
CLASS_DOCSTRING = ...
FROM_CONFIG_DOCSTRING = ...
FROM_PRETRAINED_TORCH_DOCSTRING = ...
FROM_PRETRAINED_TF_DOCSTRING = ...
FROM_PRETRAINED_FLAX_DOCSTRING = ...
class _BaseAutoModelClass:
    _model_mapping = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def from_config(cls, config, **kwargs):
        ...
    
    @classmethod
    def from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs):
        ...
    
    @classmethod
    def register(cls, config_class, model_class, exist_ok=...): # -> None:
        """
        Register a new model for this class.

        Args:
            config_class ([`PretrainedConfig`]):
                The configuration corresponding to the model to register.
            model_class ([`PreTrainedModel`]):
                The model to register.
        """
        ...
    


class _BaseAutoBackboneClass(_BaseAutoModelClass):
    _model_mapping = ...
    @classmethod
    def from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs):
        ...
    


def insert_head_doc(docstring, head_doc=...):
    ...

def auto_class_update(cls, checkpoint_for_example=..., head_doc=...):
    ...

def get_values(model_mapping): # -> list[Any]:
    ...

def getattribute_from_module(module, attr): # -> tuple[Any, ...] | Any | None:
    ...

def add_generation_mixin_to_remote_model(model_class): # -> Any:
    """
    Adds `GenerationMixin` to the inheritance of `model_class`, if `model_class` is a PyTorch model.

    This function is used for backwards compatibility purposes: in v4.45, we've started a deprecation cycle to make
    `PreTrainedModel` stop inheriting from `GenerationMixin`. Without this function, older models dynamically loaded
    from the Hub may not have the `generate` method after we remove the inheritance.
    """
    ...

class _LazyAutoMapping(OrderedDict):
    """
    " A mapping config to object (model or tokenizer for instance) that will load keys and values when it is accessed.

    Args:
        - config_mapping: The map model type to config class
        - model_mapping: The map model type to model (or tokenizer) class
    """
    def __init__(self, config_mapping, model_mapping) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, key): # -> tuple[Any, ...] | Any | None:
        ...
    
    def keys(self): # -> list[tuple[Any, ...] | Any | None]:
        ...
    
    def get(self, key, default): # -> tuple[Any, ...] | Any | None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def values(self): # -> list[tuple[Any, ...] | Any | None]:
        ...
    
    def items(self): # -> list[tuple[tuple[Any, ...] | Any | None, tuple[Any, ...] | Any | None]]:
        ...
    
    def __iter__(self): # -> Iterator[tuple[Any, ...] | Any | None]:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def register(self, key, value, exist_ok=...): # -> None:
        """
        Register a new model in this mapping.
        """
        ...
    


